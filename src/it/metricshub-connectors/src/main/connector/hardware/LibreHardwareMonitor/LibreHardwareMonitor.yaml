---
extends:
- ../Hardware/Hardware
connector:
  displayName: Libre Hardware Monitor
  platforms: Any Windows system
  reliesOn: Libre Hardware Monitor
  information: "This connector provides the hardware monitoring of Processors, Temperatures, Fans, Voltages, GPU, Memory Modules, Physical Disk of a computer."
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - NT
    criteria:
      # DETECTION
      # OS must be NT
    - type: deviceType
      keep:
      - NT
    # The root\LibreHardwareMonitor must be available
    - type: wmi
      query: SELECT Name FROM WMINET_InstrumentedAssembly
      namespace: root\LibreHardwareMonitor
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          # Hardware Discovery (no information about Enclosure)
          # Identifier, Name, HardwareType
          type: wmi
          query: "SELECT Identifier, Name, HardwareType FROM Hardware"
          namespace: root\LibreHardwareMonitor
        source(2):
          # Hardware Discovery (no information about Enclosure)
          # Manufacturer, Model
          type: wmi
          query: "SELECT Manufacturer, Model FROM Win32_ComputerSystem"
          namespace: root\cimv2
      mapping:
        # InstanceTable
        # Manufacturer, Model
        source: "${source::monitors.enclosure.discovery.sources.source(2)}"
        attributes:
          id: PC
          type: Computer
          vendor: $1
          model: $2
          name: "${awk::sprintf(\"Computer: (%s %s)\", $1, $2)}"
  voltage:
    discovery:
      sources:
        source(1):
          # Source 1 = Voltage Sensor
          # Identifier, Name, SensorType, Parent, SensorValue
          type: wmi
          query: "SELECT Identifier, Name, Parent, Value FROM Sensor WHERE SensorType = 'Voltage'"
          namespace: root\LibreHardwareMonitor
          computes:
          # Remove voltage sensors reporting zero
          - type: excludeMatchingLines
            column: 4
            regExp: "^[0.]+$"
        source(2):
          # Source 2 = Merge source 1 (voltage) and enclosure Hardware source
          # SensorIdentifier, SensorName, SensorParent, SensorValue, HardwareIdentifier, HardwareName, HardwareType
          type: tableJoin
          leftTable: "${source::monitors.voltage.discovery.sources.source(1)}"
          rightTable: "${source::monitors.enclosure.discovery.sources.source(1)}"
          leftKeyColumn: 3
          rightKeyColumn: 1
      mapping:
        # Instance table
        # SensorIdentifier, SensorName, SensorParent, SensorValue, HardwareIdentifier, HardwareName, HardwareType
        source: "${source::monitors.voltage.discovery.sources.source(2)}"
        attributes:
          id: $1
          __display_id: $6
          sensor_location: $2
          hw.parent.type: enclosure
          hw.parent.id: PC
          name: "${awk::sprintf(\"%s (%s)\", $6, $2)}"
    collect:
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = The Processor WMI class
          # Identifier, Value, SensorType
          type: wmi
          query: "SELECT Identifier, Value FROM Sensor WHERE SensorType = 'Voltage'"
          namespace: root\LibreHardwareMonitor
          computes:
            # Convert volts to millivolts
            # Identifier, Value, SensorType
          - type: multiply
            column: 2
            value: 1000
      mapping:
        # Value Table
        # Identifier, Value
        source: "${source::monitors.voltage.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.voltage: $2
  temperature:
    discovery:
      sources:
        source(1):
          # Source 1 = Temperature Sensor
          # Identifier, Name, Parent, Value
          type: wmi
          query: "SELECT Identifier, Name, Parent, Value FROM Sensor WHERE SensorType ='Temperature'"
          namespace: root\LibreHardwareMonitor
        source(2):
          # Source 3 = Merge Source 1 and 2 Together
          # SensorIdentifier, SensorName, SensorParent, SensorValue, HardwareIdentifier, HardwareName, HardwareType
          type: tableJoin
          leftTable: "${source::monitors.temperature.discovery.sources.source(1)}"
          rightTable: "${source::monitors.enclosure.discovery.sources.source(1)}"
          leftKeyColumn: 3
          rightKeyColumn: 1
          computes:
            # Perform some computation to exclude non-real sensors, and calculate alarm thresholds when possible
            # SensorId;Name;WarningThreshold;AlarmThreshold;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
      mapping:
        # Instance table
        # SensorId;Name;WarningThreshold;AlarmThreshold;
        source: "${source::monitors.temperature.discovery.sources.source(2)}"
        attributes:
          id: $1
          __display_id: $1
          sensor_location: $2
          hw.parent.type: enclosure
          hw.parent.id: PC
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: $3
          hw.temperature.limit{limit_type="high.critical"}: $4
    collect:
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = The Processor WMI class
          # Identifier, Value
          type: wmi
          query: "SELECT Identifier, Value FROM Sensor where SensorType = 'Temperature'"
          namespace: root\LibreHardwareMonitor
      mapping:
        # Value Table
        # Identifier, Value
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.temperature: $2
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source 1 = Hardware Storage
          # Identifier, Name, HardwareType
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(1)}"
          computes:
            # Keep only Storage Type
            # Identifier, Name, HardwareType
          - type: keepOnlyMatchingLines
            column: 3
            regExp: Storage
        source(2):
          # Source 2 = Storage Sensor
          # Parent
          type: wmi
          query: SELECT Parent FROM Sensor where Name = 'Available Spare' OR Name = 'Remaining Life'
          namespace: root\LibreHardwareMonitor
        source(3):
          # Source 3 = Table join to keep only disks that do have an Endurance Remaining sensor
          # Identifier, Name, HardwareType, Identifier
          type: tableJoin
          leftTable: "${source::monitors.physical_disk.discovery.sources.source(1)}"
          rightTable: "${source::monitors.physical_disk.discovery.sources.source(2)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
      mapping:
        # Instance table
        # Identifier, Name, HardwareType
        source: "${source::monitors.physical_disk.discovery.sources.source(3)}"
        attributes:
          id: $1
          __display_id: $1
          vendor: $2
          hw.parent.type: enclosure
          hw.parent.id: PC
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source 1 = Storage Sensor
          # Identifier, Parent, Value, Name
          type: wmi
          query: "SELECT Identifier, Parent, Value, Name FROM Sensor where Name = 'Available Spare' OR Name = 'Remaining Life'"
          namespace: root\LibreHardwareMonitor
        source(2):
          # LeftTable = SensorIdentifier, SensorParent, SensorValue, SensorName
          # RightTable = Identifier, Name, HardwareType
          # Match SensorParent with HardwareIdentifier
          # TableJoint = SensorIdentifier, SensorParent, SensorValue, SensorName, HardwareIdentifier,  HardwareName, HardwareType
          type: tableJoin
          leftTable: "${source::monitors.physical_disk.collect.sources.source(1)}"
          rightTable: "${source::monitors.enclosure.discovery.sources.source(1)}"
          leftKeyColumn: 2
          rightKeyColumn: 1
      mapping:
        # Instance table
        # SensorIdentifier, SensorParent, SensorValue, SensorName, HardwareIdentifier,  HardwareName, HardwareType
        source: "${source::monitors.physical_disk.collect.sources.source(2)}"
        attributes:
          id: $2
        metrics:
          hw.physical_disk.endurance_utilization{state="remaining"}: percent2Ratio($3)
  fan:
    discovery:
      sources:
        source(1):
          # Source 1 = Fan Sensor
          # Identifier, Name, Parent
          # SensorIdentifier, SensorName, SensorParent, SensorValue
          type: wmi
          query: "SELECT Identifier, Name, Parent, Value FROM Sensor WHERE SensorType = 'Fan'"
          namespace: root\LibreHardwareMonitor
          computes:
            # Remove fans that are not spinning
            # SensorIdentifier, SensorName, SensorParent, SensorValue
          - type: excludeMatchingLines
            column: 4
            regExp: "^[0.]+$"
        source(2):
          # Source 3 = Merge Source 1 and 2 Together
          # SensorIdentifier, SensorName, SensorParent, SensorValue, HardwareIdentifier, HardwareName, HardwareType
          type: tableJoin
          leftTable: "${source::monitors.fan.discovery.sources.source(1)}"
          rightTable: "${source::monitors.enclosure.discovery.sources.source(1)}"
          leftKeyColumn: 3
          rightKeyColumn: 1
          computes:
          # SensorIdentifier, SensorName, SensorParent, SensorValue, HardwareIdentifier, HardwareName, HardwareType
          - type: leftConcat
            column: 6
            value: ' - '
            # Concatenate SensorName and HardwareName
            # SensorIdentifier, SensorName, SensorParent, SensorValue, HardwareIdentifier, HardwareName, HardwareType
          - type: leftConcat
            column: 6
            value: $2
      mapping:
        # Instance table
        # SensorIdentifier, SensorName, SensorParent, HardwareIdentifier, HardwareName, HardwareType
        source: "${source::monitors.fan.discovery.sources.source(2)}"
        attributes:
          id: $1
          __display_id: $6
          hw.parent.type: enclosure
          hw.parent.id: PC
          name: $6
    collect:
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = The Processor WMI class
          # Identifier, Value
          type: wmi
          query: "SELECT Identifier, Value FROM Sensor where SensorType ='Fan'"
          namespace: root\LibreHardwareMonitor
      mapping:
        # Value Table
        # Identifier, Value
        source: "${source::monitors.fan.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.fan.speed: $2
  cpu:
    discovery:
      sources:
        source(1):
          # Source 1 = Hardware CPU
          # Identifier, Name, HardwareType
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(1)}"
          computes:
            # Keep only Storage Type
            # HardwareIdentifier, HardwareName, HardwareType
          - type: keepOnlyMatchingLines
            column: 3
            regExp: cpu
        source(2):
          # Source 2 = CPU Power Consumption
          # Name, Parent, CPUPowerConsumption
          type: wmi
          query: "SELECT Name, Parent, Value FROM Sensor where SensorType='Power' and Name = 'CPU Package' or Name ='Package'"
          namespace: root\LibreHardwareMonitor
        source(3):
          # Source 1 : Hardware ID and Name
          # Source 2 : CPUPowerConsumption
          # HardwareIdentifier, HardwareName, HardwareType, Name, Parent, CPUPowerConsumption
          type: tableJoin
          leftTable: "${source::monitors.cpu.discovery.sources.source(1)}"
          rightTable: "${source::monitors.cpu.discovery.sources.source(2)}"
          leftKeyColumn: 1
          rightKeyColumn: 2
          defaultRightLine: ;;;;
          computes:
          # If CPUPowerConsumption < 1 then disable PowerConsumption parameter
          - type: extract
            column: 6
            subColumn: 1
            subSeparators: .
          # Replace 0 by empty: ParameterActivation must be empty to be disabled
          - type: replace
            column: 6
            existingValue: 0
            newValue: ""
      mapping:
        # Instance table
        # HardwareIdentifier, HardwareName, HardwareType, Name, Parent, CPUPowerConsumption
        source: "${source::monitors.cpu.discovery.sources.source(3)}"
        attributes:
          id: $1
          __display_id: $1
          model: $2
          hw.parent.type: enclosure
          hw.parent.id: PC
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
        conditionalCollection:
          hw.power{hw.type="cpu"}: $6
    collect:
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = Sensor type 'Clock'
          # SensorName;CpuDeviceID;Clock
          type: wmi
          query: "SELECT Name, Parent, Value FROM Sensor where SensorType ='Clock'"
          namespace: root\LibreHardwareMonitor
          computes:
            # Process that through an AWK script that will compute the clock speed average
            # (yes, we have the clock speed for each core, and they can be different)
            # CpuDeviceID;AverageClock
          - type: awk
            script: "${file::embeddedFile-3}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3"
        source(2):
          # SensorName;CpuDeviceID;CPUPowerConsumption
          type: wmi
          query: "SELECT Name, Parent, Value FROM Sensor where SensorType='Power' and Name = 'CPU Package' or Name ='Package'"
          namespace: root\LibreHardwareMonitor
        source(3):
          # Source 1 : Hardware ID and Name
          # Source 2 : CPUPowerConsumption
          # CpuDeviceID;AverageClock;SensorName;CpuDeviceID;CPUPowerConsumption
          type: tableJoin
          leftTable: "${source::monitors.cpu.collect.sources.source(1)}"
          rightTable: "${source::monitors.cpu.collect.sources.source(2)}"
          leftKeyColumn: 1
          rightKeyColumn: 2
          defaultRightLine: ;;;;
      mapping:
        # The Collect Table
        # CpuDeviceID;AverageClock;SensorName;CpuDeviceID;CPUPowerConsumption
        source: "${source::monitors.cpu.collect.sources.source(3)}"
        attributes:
          id: $1
        metrics:
          hw.cpu.speed: megaHertz2Hertz($2)
          hw.power{hw.type="cpu"}: $5
          hw.energy{hw.type="cpu"}: fakeCounter($5)
  memory:
    discovery:
      sources:
        source(1):
          # Source 1 = Hardware Memory
          # Identifier, Name, HardwareType
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(1)}"
          computes:
            # Keep only Storage Type
            # Identifier, Name, HardwareType
          - type: keepOnlyMatchingLines
            column: 3
            regExp: memory
        source(2):
          # Source 2 = Memory Sensor
          # Name, Parent, MemoryAvailable
          type: wmi
          query: "SELECT Name, Parent, Value FROM Sensor where Name = 'Memory Available' OR Name ='Memory Used'"
          namespace: root\LibreHardwareMonitor
        source(3):
          # Keep only Memory Available
          # Name, Parent, MemoryAvailable
          type: copy
          from: "${source::monitors.memory.discovery.sources.source(2)}"
          computes:
          - type: keepOnlyMatchingLines
            column: 1
            regExp: Memory Available
        source(4):
          # Keep only ram
          # Name, Parent, MemoryUsed
          type: copy
          from: "${source::monitors.memory.discovery.sources.source(2)}"
          computes:
          - type: keepOnlyMatchingLines
            column: 1
            regExp: Memory Used
        source(5):
          # Source 2 : MemoryAvailable
          # Source 3 : MemoryUsed
          # Name, Parent, MemoryAvailable, Name, Parent, MemoryUsed
          type: tableJoin
          leftTable: "${source::monitors.memory.discovery.sources.source(3)}"
          rightTable: "${source::monitors.memory.discovery.sources.source(4)}"
          leftKeyColumn: 2
          rightKeyColumn: 2
          computes:
            # Clean duplicate column
            # Parent, MemoryAvailable; MemoryUsed
          - type: keepColumns
            columnNumbers: "2,3,6"
            # Sum up MemoryAvailable and MemoryUsed to get MemorySize
            # Parent, MemorySize; MemoryUsed
          - type: add
            column: 2
            value: $3
            # Convert to GB
            # Parent, MemorySize; MemoryUsed
          - type: multiply
            column: 2
            value: 1024
        source(6):
          # Source 1 : MemoryName
          # Source 6 : MemorySize
          # Identifier, Name, HardwareType, Parent, MemorySize; MemoryUsed
          type: tableJoin
          leftTable: "${source::monitors.memory.discovery.sources.source(1)}"
          rightTable: "${source::monitors.memory.discovery.sources.source(5)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
      mapping:
        # Instance table
        # Identifier, Name, HardwareType, Parent, MemorySize; MemoryUsed
        source: "${source::monitors.memory.discovery.sources.source(6)}"
        attributes:
          id: $1
          __display_id: $2
          hw.parent.type: enclosure
          hw.parent.id: PC
          name: "${awk::sprintf(\"%s (%s MB)\", $2, $5)}"
        metrics:
          hw.memory.limit: mebiByte2Byte($5)
  gpu:
    discovery:
      sources:
        source(1):
          # Discovery
          # Source 1 = Hardware GPU
          # Identifier, Name, HardwareType
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(1)}"
          computes:
            # Keep only GPU
            # Identifier, Name, HardwareType
          - type: keepOnlyMatchingLines
            column: 3
            regExp: gpu
            # Remove the Gpu word in HardwareVendor
            # Identifier, Name, HardwareType
          - type: replace
            column: 3
            existingValue: gpu
            newValue: ""
        source(2):
          # Source 2 = Retrieve GPU Memory Size from Sensor
          # Parent, Name, Value
          type: wmi
          query: "SELECT Parent, Name, Value FROM Sensor WHERE Name = 'GPU Memory Total'"
          namespace: root\LibreHardwareMonitor
        source(3):
          # Source 3 = Joint source
          # Source 1 : Get the Hardware Name
          # Source 2 : Get the Memory Size
          # Identifier, Name, HardwareType, ParentSensor, SensorName, MemorySize
          type: tableJoin
          leftTable: "${source::monitors.gpu.discovery.sources.source(1)}"
          rightTable: "${source::monitors.gpu.discovery.sources.source(2)}"
          leftKeyColumn: 1
          rightKeyColumn: 1
          defaultRightLine: ;;;
      mapping:
        # Instance table
        # Identifier, Name, HardwareType, ParentSensor, SensorName, MemorySize
        source: "${source::monitors.gpu.discovery.sources.source(3)}"
        attributes:
          id: $1
          __display_id: $2
          vendor: $3
          hw.parent.type: enclosure
          hw.parent.id: PC
          name: "${awk::sprintf(\"%s (%s - %s)\", $2, $3, mebiBytes2HumanFormat($6))}"
        metrics:
          hw.gpu.memory.limit: mebiByte2Byte($6)
    collect:
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = The Processor WMI class
          # Name, Parent, Value, SensorType
          type: wmi
          query: "SELECT Name, Parent, Value, SensorType FROM Sensor"
          namespace: root\LibreHardwareMonitor
          computes:
          # Name, gpuId, Value, SensorType
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5,6,7,8,9"
      mapping:
        # Value Table
        # gpuID, VideoDecode, VideoEncode, Memory, PowerConsumption, ReveivedBytes, TransmittedBytes, UsedTimePercent
        source: "${source::monitors.gpu.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.gpu.utilization{task="decoder"}: percent2Ratio($2)
          hw.gpu.utilization{task="encoder"}: percent2Ratio($3)
          hw.gpu.memory.utilization: percent2Ratio($4)
          hw.power{hw.type="gpu"}: $5
          hw.energy{hw.type="gpu"}: fakeCounter($5)
          hw.gpu.io{direction="receive"}: fakeCounter($6)
          hw.gpu.io{direction="transmit"}: fakeCounter($7)
          hw.gpu.utilization{task="general"}: percent2Ratio($8)
