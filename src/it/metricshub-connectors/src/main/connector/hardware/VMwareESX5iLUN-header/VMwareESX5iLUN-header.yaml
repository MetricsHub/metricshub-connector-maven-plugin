---
connector:
  detection:
    criteria:
    - type: osCommand
      commandLine: _EsxcliConstant system version get
      expectedResult: "Version: [567]"
      executeLocally: _ExecuteLocally
    # Check that there are FC LUNs
    - type: osCommand
      commandLine: _EsxcliConstant storage core path list
      expectedResult: "Transport: fc"
      executeLocally: _ExecuteLocally
monitors:
  lun:
    discovery:
      sources:
        source(1):
          # Get the list of LUNs from esxcli storage core path list
          type: osCommand
          commandLine: _EsxcliConstant storage core path list
          executeLocally: _ExecuteLocally
          computes:
            # AWK it
            # MSHW;LunName;LunInfo;NumberPaths;LunStatusInfo;
            # LunName;LunInfo;
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3"
      mapping:
        # InstanceTable = Source(1)
        # LunName;LunInfo;
        source: "${source::monitors.lun.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $1
          array_name: $2
          hw.parent.type: enclosure
          name: $2
    collect:
      # Collect type is multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Get the list of LUNs from esxcli storage core path list
          type: osCommand
          commandLine: _EsxcliConstant storage core path list
          executeLocally: _ExecuteLocally
          computes:
            # AWK it
            # MSHW;LunName;LunInfo;NumberPaths;LunStatusInfo;
            # LunName;NumberPaths;LunStatusInfo;
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,4,5"
      mapping:
        # ValueTable = Source(1)
        # LunName;NumberPaths;LunStatusInfo;
        source: "${source::monitors.lun.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.lun.paths: $2
        legacyTextParameters:
          AvailablePathInformation: $3
  other_device:
    discovery:
      sources:
        source(1):
          # Get the list of SD Cards from esxcli storage core device list
          type: osCommand
          commandLine: _EsxcliConstant storage core device list
          executeLocally: _ExecuteLocally
          computes:
            # AWK it
            # Type;USBID;Vendor;Model;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
      mapping:
        # InstanceTable = Source(1)
        # Type;USBID;Vendor;Model;
        source: "${source::monitors.other_device.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $2
          device_type: $1
          info: "${awk::join(\" \", $3, $4)}"
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s: %s\", $1, $2)}"
    collect:
      # Collect type is multi-instance
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Get the list of SD Cards from esxcli storage core device list
          type: osCommand
          commandLine: _EsxcliConstant storage core device list
          executeLocally: _ExecuteLocally
          computes:
            # AWK it
            # USBID;Status;StatusInformation;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "3,6,7"
            # Patrol Status comes from Status
            # USBID;PatrolStatus;StatusInformation;
          - type: translate
            column: 2
            translationTable: "${translation::statusTranslationTable}"
      mapping:
        # ValueTable = Source(1)
        # USBID;Status;StatusInformation;
        source: "${source::monitors.other_device.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="other_device"}: $2
        legacyTextParameters:
          StatusInformation: $3
translations:
  statusTranslationTable:
    dead: failed
    Default: degraded
    "off": ok
    "on": ok
