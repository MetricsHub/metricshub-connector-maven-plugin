---
extends:
- ../Hardware/Hardware
connector:
  displayName: Windows Storage Spaces (WMI)
  platforms: Microsoft Windows
  reliesOn: Windows Storage Spaces
  information: "This connector provides monitoring physical disks through Windows Storage Management's WMI provider. It supports all disk types, including disks on NVMe bus and NVDIMM. When available, temperature sensors are also discovered and monitored."
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - Storage
    - NT
    supersedes:
    - WBEMGenDiskNT
    - DiskPart
    criteria:
    # Must be Windows
    - type: deviceType
      keep:
      - NT
    # Must be Hardware Sentry KM 11.3 at least
    - type: productRequirements
      kmVersion: 11.3.00
      # Having something in MSFT_Volume is enough to consider that the WMI provider
      # for Windows Storage Spaces is working
    - type: wmi
      namespace: root\Microsoft\Windows\Storage
      query: SELECT ObjectId FROM MSFT_Volume
monitors:
  disk_controller:
    discovery:
      sources:
        source(1):
          # Source(1) = MSFT_PhysicalDisk
          # __PATH;BusType;DeviceId;FirmwareVersion;MediaType;Model;SerialNumber;Size;SpindleSpeed;
          type: wmi
          namespace: root\Microsoft\Windows\Storage
          query: "SELECT __PATH,BusType,DeviceId,FirmwareVersion,MediaType,Model,SerialNumber,Size,SpindleSpeed FROM MSFT_PhysicalDisk"
          computes:
            # Filter on MediaType: Keep only actual disks (HDD, SDD and SCM)
            # __PATH;BusType;DeviceId;FirmwareVersion;MediaType;Model;SerialNumber;Size;SpindleSpeed;
          - type: keepOnlyMatchingLines
            column: 5
            valueList: "3,4,5"
            # Filter on BusType: Keep only disks on bus that are on an actual physical disk bus (SCSI, ATA, SSA, SAS, SATA, NVMe)
            # Note: We exclude 6 (FC) because modern systems no longer use FC to attach disks, and that allows us to easily
            # exclude LUNs over HBAs.
            # __PATH;BusType;DeviceId;FirmwareVersion;MediaType;Model;SerialNumber;Size;SpindleSpeed;
          - type: keepOnlyMatchingLines
            column: 2
            valueList: "1,3,5,10,11,17"
            # Translate BusType
            # __PATH;BusType;DeviceId;FirmwareVersion;MediaType;Model;SerialNumber;Size;SpindleSpeed;
          - type: translate
            column: 2
            translationTable: "${translation::BustypeTranslationTable}"
            # Merge all info into a proper label for the "Model" field
            # __PATH;DeviceID;Model;FirmwareVersion;SerialNumber;Size
          - type: awk
            script: "${file::embeddedFile-1}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5,6,7"
        source(2):
          # Source(2) = Win32_DiskDrive
          # SerialNumber;PnPDeviceID;
          type: wmi
          query: "SELECT __PATH,SerialNumber,PnPDeviceID FROM Win32_DiskDrive"
          namespace: root\cimv2
          computes:
            # Remove extraneous spaces
            # __PATH;SerialNumber;PnPDeviceID;
          - type: replace
            column: 2
            existingValue: ' '
            newValue: ""
        source(3):
          # Source(3) = jointure of source(1) and source(2) on SerialNumber in order to
          # have the PnPDeviceID of the disk instances from MSFT_PhysicalDisk
          # __PATH_MSFT_DiskDrive;DeviceID;Model;FirmwareVersion;SerialNumber;Size;__PATH_Win32_DiskDrive;SerialNumber;PnPDeviceID;
          type: tableJoin
          leftTable: "${source::monitors.disk_controller.discovery.sources.source(1)}"
          rightTable: "${source::monitors.disk_controller.discovery.sources.source(2)}"
          leftKeyColumn: 5
          rightKeyColumn: 2
        source(4):
          # Source(4) = Win32_PnpDevice
          # __PATH_Device;__PATH_PnP;
          type: wmi
          query: "SELECT SameElement,SystemElement FROM Win32_PnpDevice"
          namespace: root\cimv2
        source(5):
          # Source(5) = Join Source(3) and Source(4)
          # __PATH_MSFT_DiskDrive;DeviceID;Model;FirmwareVersion;SerialNumber;Size;__PATH_Win32_DiskDrive;SerialNumber;PnPDeviceID;__PATH_Win32_DiskDrive;__PATH_PnP;
          type: tableJoin
          leftTable: "${source::monitors.disk_controller.discovery.sources.source(3)}"
          rightTable: "${source::monitors.disk_controller.discovery.sources.source(4)}"
          leftKeyColumn: 7
          rightKeyColumn: 1
          keyType: Wbem
        source(6):
          # Source(6) = Table that links the PnP Devices (who controls who)
          # __PATH_ControllerPnPDeviceID;__PATH_DiskPnPDeviceID;
          type: wmi
          query: "SELECT Antecedent,Dependent FROM CIM_ControlledBy"
          namespace: root\cimv2
        source(7):
          # Source(7) = jointure of PnPDeviceID  source(3) with Dependant source(4)
          # __PATH_MSFT_DiskDrive;DeviceID;Model;FirmwareVersion;SerialNumber;Size;__PATH_Win32_DiskDrive;SerialNumber;PnPDeviceID;__PATH_Win32_DiskDrive;__PATH_PnP;__PATH_Controller;__PATH_DiskPnPDeviceID;
          type: tableJoin
          leftTable: "${source::monitors.disk_controller.discovery.sources.source(5)}"
          rightTable: "${source::monitors.disk_controller.discovery.sources.source(6)}"
          leftKeyColumn: 11
          rightKeyColumn: 2
          keyType: Wbem
          computes:
            # Keep only relevant columns (remove temporary garbage)
            # __PATH_MSFT_DiskDrive;DeviceID;Model;FirmwareVersion;SerialNumber;Size;PnPDeviceID;__PATH_Controller;
          - type: keepColumns
            columnNumbers: "1,2,3,4,5,6,9,12"
        source(8):
          # Source(8) = CIM_Controller
          # __PATH;Name;
          type: wmi
          query: "SELECT __PATH,Name FROM CIM_Controller"
          namespace: root\cimv2
        source(9):
          # Source(9) = jointure of source(8) and source(7)
          # This filters out controllers that don't have disks attached to them)
          # __PATH_Controller;ControllerName;__PATH_MSFT_DiskDrive;DeviceID;Model;FirmwareVersion;SerialNumber;Size;PnPDeviceID;__PATH_Controller;
          type: tableJoin
          leftTable: "${source::monitors.disk_controller.discovery.sources.source(8)}"
          rightTable: "${source::monitors.disk_controller.discovery.sources.source(7)}"
          leftKeyColumn: 1
          rightKeyColumn: 8
          keyType: Wbem
        source(10):
          # Source(10) = ASSOCIATORS of each MSFT_PhysicalDisk, from the MSFT_StorageReliabilityCounter table
          # DeviceId;ReadErrors;Wear;WriteErrors;Temperature;TemperatureMax;
          type: wmi
          executeForEachEntryOf:
            source: "${source::monitors.disk_controller.discovery.sources.source(7)}"
            concatMethod: list
          namespace: root\Microsoft\Windows\Storage
          query: "SELECT DeviceId,ReadErrorsTotal,Wear,WriteErrorsTotal,Temperature,TemperatureMax FROM ASSOCIATORS OF {$1} WHERE ResultClass = MSFT_StorageReliabilityCounter"
      mapping:
        # InstanceTable: Source(9) (not Source(10)!)
        # __PATH_Controller;ControllerName;__PATH_MSFT_DiskDrive;DeviceID;Model;FirmwareVersion;SerialNumber;Size;PnPDeviceID;__PATH_Controller;
        source: "${source::monitors.disk_controller.discovery.sources.source(9)}"
        attributes:
          id: $1
          model: $2
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"Disk Controller: %s (%s)\", $1, $2)}"
  physical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = jointure of DiskController.Discovery.Source(7) and DiskController.Discovery.Source(8)
          # __PATH_MSFT_DiskDrive;DeviceID;Model;FirmwareVersion;SerialNumber;Size;PnPDeviceID;__PATH_Controller;__PATH_Controller;ControllerName;
          type: tableJoin
          leftTable: "${source::monitors.disk_controller.discovery.sources.source(7)}"
          rightTable: "${source::monitors.disk_controller.discovery.sources.source(8)}"
          leftKeyColumn: 8
          rightKeyColumn: 1
          keyType: Wbem
          computes:
            # Keep only the necessary columns
            # __PATH_MSFT_DiskDrive;DeviceID;Model;FirmwareVersion;SerialNumber;Size;__PATH_Controller;
          - type: keepColumns
            columnNumbers: "1,2,3,4,5,6,8"
        source(2):
          # Source(2) = Table joint of Source(1) with DiskController.Discovery.Source(10)
          # __PATH_MSFT_DiskDrive;DeviceID;Model;FirmwareVersion;SerialNumber;Size;__PATH_Controller;DeviceId;ReadErrors;Wear;WriteErrors;Temperature;TemperatureMax;
          type: tableJoin
          leftTable: "${source::monitors.physical_disk.discovery.sources.source(1)}"
          rightTable: "${source::monitors.disk_controller.discovery.sources.source(10)}"
          leftKeyColumn: 2
          rightKeyColumn: 1
          defaultRightLine: ;;;;;;
      mapping:
        # The instance table = Source(2)
        # __PATH_MSFT_DiskDrive;DeviceID;Model;FirmwareVersion;SerialNumber;Size;__PATH_Controller;DeviceId;ReadErrors;Wear;WriteErrors;Temperature;TemperatureMax;
        source: "${source::monitors.physical_disk.discovery.sources.source(2)}"
        attributes:
          id: $2
          vendor: $3
          firmware_version: $4
          serial_number: $5
          hw.parent.type: disk_controller
          hw.parent.id: $7
          name: "${awk::sprintf(\"%s (%s - %s)\", $2, $3, bytes2HumanFormatBase10($6))}"
        metrics:
          hw.physical_disk.size: $6
        conditionalCollection:
          hw.errors{hw.type="physical_disk"}: $9
          hw.physical_disk.endurance_utilization{state="remaining"}: $10
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = the MSFT_PhysicalDisk table
          # __PATH;DeviceId;OperationalStatus
          type: wmi
          namespace: root\Microsoft\Windows\Storage
          query: "SELECT __PATH,DeviceId,OperationalStatus FROM MSFT_PhysicalDisk"
          computes:
            # Duplicate the OperationalStatus column, twice
            # __PATH;DeviceId;OperationalStatus;OperationalStatus;OperationalStatus
          - type: duplicateColumn
            column: 3
          - type: duplicateColumn
            column: 3
            # Translate the OperationalStatus field into an array of statuses
            # __PATH;DeviceId;StatusArray;OperationalStatus;OperationalStatus
          - type: arrayTranslate
            column: 3
            translationTable: "${translation::OperationalStatusTranslationTable}"
          # Convert the array of status to a simple status (keep the worse one)
          - type: convert
            column: 3
            conversion: array2SimpleStatus
            # Translate the 2nd OperationalStatus field into a more readable string
            # __PATH;DeviceId;Status;StatusInformation;OperationalStatus
          - type: arrayTranslate
            column: 4
            translationTable: "${translation::OperationalStatusInformationTranslationTable}"
            resultSeparator: ' - '
            # Translate the 3rd OperationalStatus field into the PredictiveFailure parameter
            # __PATH;DeviceId;Status;StatusInformation;PredictedFailure
          - type: translate
            column: 5
            translationTable: "${translation::PredictedFailureTranslationTable}"
        source(2):
          # Source(2) = ASSOCIATORS of each MSFT_PhysicalDisk, from the MSFT_StorageReliabilityCounter table
          # Use DiskController.Discovery.Source(7) for the list of instances instead of PhysicalDisk.Collect.Source(1)
          # because non real physical disks have been filtered out from it, thus preventing unnecessary WMI queries
          # DeviceId;ReadErrors;Wear;WriteErrors;
          type: wmi
          executeForEachEntryOf:
            source: "${source::monitors.disk_controller.discovery.sources.source(7)}"
            concatMethod: list
          namespace: root\Microsoft\Windows\Storage
          query: "SELECT DeviceId,ReadErrorsTotal,Wear,WriteErrorsTotal FROM ASSOCIATORS OF {$1} WHERE ResultClass = MSFT_StorageReliabilityCounter"
          computes:
            # TotalErrors = Read + Write
            # DeviceId;TotalErrors;Wear;WriteErrors;
          - type: add
            column: 2
            value: $4
            # Convert Wear into EnduranceRemaing (Endurance Remaining = 100 - Wear)
            # DeviceId;TotalErrors;EnduranceRemaing;WriteErrors;
          - type: multiply
            column: 3
            value: -1
          - type: add
            column: 3
            value: 100
        source(3):
          # Source(3) = Table join of Source(1) and Source(2)
          # __PATH;DeviceId;Status;StatusInformation;OperationalStatus;DeviceId;TotalErrors;EnduranceRemaing;WriteErrors;
          type: tableJoin
          leftTable: "${source::monitors.physical_disk.collect.sources.source(1)}"
          rightTable: "${source::monitors.physical_disk.collect.sources.source(2)}"
          leftKeyColumn: 2
          rightKeyColumn: 1
          defaultRightLine: ;;;;
      mapping:
        # ValueTable = Source(3)
        # __PATH;DeviceId;Status;StatusInformation;OperationalStatus;DeviceId;TotalErrors;EnduranceRemaing;WriteErrors;
        source: "${source::monitors.physical_disk.collect.sources.source(3)}"
        attributes:
          id: $2
        metrics:
          hw.status{hw.type="physical_disk"}: $3
          hw.status{hw.type="physical_disk", state="predicted_failure"}: boolean($5)
          hw.errors{hw.type="physical_disk"}: $7
          hw.physical_disk.endurance_utilization{state="remaining"}: percent2Ratio($8)
        legacyTextParameters:
          StatusInformation: $4
  logical_disk:
    discovery:
      sources:
        source(1):
          # Source(1) = MSFT_Volume
          # ObjectId;DriveLetterNumber;DriveType;FileSystem;Name;Size;
          type: wmi
          query: "SELECT ObjectId,DriveLetter,DriveType,FileSystem,FileSystemLabel,Size FROM MSFT_Volume"
          namespace: root\Microsoft\Windows\Storage
          computes:
            # Keep only drive type 3 ("Fixed Drive")
            # ObjectId;DriveLetterNumber;DriveType;FileSystem;Name;Size;
          - type: keepOnlyMatchingLines
            column: 3
            valueList: 3
            # Transform DriveLetterNumber into a letter, and change ObjectId for DriveLetter is possible
            # DeviceID;Label;Filesystem;Size;
          - type: awk
            script: "${file::embeddedFile-2}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
      mapping:
        # InstanceTable = Source(1)
        source: "${source::monitors.logical_disk.discovery.sources.source(1)}"
        attributes:
          id: $1
          __display_id: $2
          type: Volume
          info: $3
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $2, bytes2HumanFormatBase2($4))}"
        metrics:
          hw.logical_disk.limit: $4
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = MSFT_Volume
          # ObjectId;DriveLetter;HealthStatus;OperationalStatus;SizeRemaning;
          type: wmi
          query: "SELECT ObjectId,DriveLetter,HealthStatus,SizeRemaining FROM MSFT_Volume"
          namespace: root\Microsoft\Windows\Storage
          computes:
            # Duplicate the HealthStatus column
            # ObjectId;DriveLetter;HealthStatus;HealthStatus;SizeRemaning;
          - type: duplicateColumn
            column: 3
            # Translate the first HealthStatus field into a simple status
            # ObjectId;DriveLetter;Status;OperationalStatus;SizeRemaning;
          - type: translate
            column: 3
            translationTable: "${translation::LogicalDiskHealthStatusTranslationTable}"
            # Translate the OperationalStatus field into detailed status information
            # ObjectId;DriveLetter;Status;StatusInformation;SizeRemaning;
          - type: translate
            column: 4
            translationTable: "${translation::LogicalDiskHealthStatusInformationTranslationTable}"
            # Convert ObjectId and DriveLetterNumber into a DeviceId
            # DeviceID;Status;StatusInformation;SizeRemaning;
          - type: awk
            script: "${file::embeddedFile-3}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.logical_disk.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.status{hw.type="logical_disk"}: $2
          hw.logical_disk.usage{state="free"}: $4
          hw.logical_disk.usage{state="used"}: collectAllocatedSpace()
        legacyTextParameters:
          StatusInformation: $3
  temperature:
    discovery:
      sources:
        source(1):
          # Source(1) = ASSOCIATORS of each MSFT_PhysicalDisk, from the MSFT_StorageReliabilityCounter table
          # DeviceId;ReadErrors;Wear;WriteErrors;Temperature;TemperatureMax;
          type: copy
          from: "${source::monitors.disk_controller.discovery.sources.source(10)}"
          computes:
            # Remove lines where temperature = 0
            # DeviceId;ReadErrors;Wear;WriteErrors;Temperature;TemperatureMax;
          - type: excludeMatchingLines
            column: 5
            valueList: 0
        source(2):
          # Source(2) = Table join of Source(1) with PhysicalDisk.Discovery.Source(1)
          # DeviceId;ReadErrors;Wear;WriteErrors;Temperature;TemperatureMax;__PATH_MSFT_DiskDrive;DeviceID;Model;FirmwareVersion;SerialNumber;Size;PnPDeviceID;__PATH_Controller;__PATH_Controller;ControllerName;
          type: tableJoin
          leftTable: "${source::monitors.temperature.discovery.sources.source(1)}"
          rightTable: "${source::monitors.physical_disk.discovery.sources.source(1)}"
          leftKeyColumn: 1
          rightKeyColumn: 2
          computes:
            # Keep only the necessary columns
            # DeviceId;TemperatureMax;Model;
          - type: keepColumns
            columnNumbers: "1,6,9"
            # Assess Warning and Alarm thresholds, based on TemperatureMax
            # (which is often 0, in which case we set thresholds based on the type of the disk)
            # DeviceId;TemperatureType;WarningThreshold;AlarmThreshold;
          - type: awk
            script: "${file::embeddedFile-4}"
            keep: ^MSHW;
            separators: ;
            selectColumns: "2,3,4,5"
      mapping:
        # InstanceTable = Source(2)
        source: "${source::monitors.temperature.discovery.sources.source(2)}"
        attributes:
          id: $1
          sensor_location: $2
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $1, $2)}"
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: $3
          hw.temperature.limit{limit_type="high.critical"}: $4
    collect:
      # Collect
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          # Source(1) = ASSOCIATORS of each MSFT_PhysicalDisk, from the MSFT_StorageReliabilityCounter table
          # DeviceId;ReadErrors;Wear;WriteErrors;Temperature;TemperatureMax;
          type: wmi
          executeForEachEntryOf:
            source: "${source::monitors.physical_disk.discovery.sources.source(1)}"
            concatMethod: list
          namespace: root\Microsoft\Windows\Storage
          query: "SELECT DeviceId,Temperature FROM ASSOCIATORS OF {$1} WHERE ResultClass = MSFT_StorageReliabilityCounter"
      mapping:
        # ValueTable = Source(1)
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        attributes:
          id: $1
        metrics:
          hw.temperature: $2
translations:
  PredictedFailureTranslationTable:
    "53285": "True"
    "5": "True"
    Default: "False"
  OperationalStatusInformationTranslationTable:
    "53261": Scan Needed
    "53286": Abnormal Latency
    "53262": Spot Fix Needed
    "53263": Full Repair Needed
    "53285": Threshold Exceeded
    "53269": Removing From Pool
    "10": Stopped
    "11": In Service
    "12": No Contact
    "13": Lost Communication
    "14": Aborted
    "15": Dormant
    "16": Supporting Entity in Error
    "17": Completed
    "18": Power Mode
    "19": Relocating
    "53271": Updating Firmware
    "53272": Device Hardware Error
    "53270": In Maintenance Mode
    "53253": Split
    "1": Other
    "53254": Stale Metadata
    "53276": Starting Maintenance Mode
    "2": ""
    "53273": Not Usable
    "3": Degraded
    "53252": Failed Media
    "53274": Transient Error
    "4": Stressed
    "5": Predictive Failure
    "6": Error
    "53255": IO Error
    "53277": Stopping Maintenance Mode
    "7": Non-Recoverable Error
    "53256": Unrecognized Metadata
    "8": Starting
    "9": Stopping
  LogicalDiskHealthStatusInformationTranslationTable:
    "0": ""
    "1": Scan Needed
    "2": Spot Fix Needed
    "3": Full Repair Needed
    Default: Unknown
  LogicalDiskHealthStatusTranslationTable:
    "0": ok
    "1": degraded
    "2": degraded
    "3": failed
    Default: UNKNOWN
  BustypeTranslationTable:
    "11": SATA
    "12": Secure Digital
    "13": MMC - Multimedia Card
    "14": Other
    "15": File-Backed Virtual
    "16": Storage Spaces
    "17": NVMe
    "18": Other
    "0": Unknown
    "1": SCSI
    "2": ATAPI
    "3": ATA
    "4": IEEE 1394
    "5": SSA
    "6": Fibre Channel
    "7": USB
    "8": RAID
    "9": iSCSI
    "10": SAS
  OperationalStatusTranslationTable:
    "53261": ok
    "53286": degraded
    "53262": ok
    "53263": degraded
    "53285": degraded
    "53269": ok
    "10": ok
    "11": degraded
    "12": failed
    "13": failed
    "14": failed
    "15": ok
    "16": failed
    "17": ok
    "18": ok
    "19": ok
    "53271": degraded
    "53272": failed
    "53270": degraded
    "53253": degraded
    "53254": degraded
    "53276": degraded
    "2": ok
    "53273": failed
    "3": degraded
    "53252": failed
    "53274": failed
    "4": degraded
    "5": ok
    "6": failed
    "53255": failed
    "53277": degraded
    "7": failed
    "53256": degraded
    "8": ok
    "9": ok
