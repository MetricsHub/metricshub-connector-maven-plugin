---
extends:
- ../Hardware/Hardware
connector:
  displayName: Nvidia-Smi
  platforms: Any system with Nvidia GPUs
  reliesOn: NVIDIA drivers with NVIDIA-SMI support.
  information: Gives hardware information on most Nvidia GPUs. (Clocking)
  detection:
    connectionTypes:
    - remote
    - local
    appliesTo:
    - NT
    - Linux
    criteria:
    - type: osCommand
      commandLine: nvidia-smi
      expectedResult: Driver Version
      errorMessage: nvidia-smi not found at target host.
monitors:
  enclosure:
    discovery:
      sources:
        source(1):
          type: osCommand
          commandLine: nvidia-smi -q
          timeout: 90
          computes:
          - type: awk
            script: "${file::embeddedFile-1}"
      mapping:
        source: "${source::monitors.enclosure.discovery.sources.source(1)}"
  gpu:
    discovery:
      sources:
        source(1):
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(1)}"
          computes:
          - type: keepOnlyMatchingLines
            column: 1
            regExp: ^MSHW_GPU
      mapping:
        source: "${source::monitors.gpu.discovery.sources.source(1)}"
        attributes:
          vendor: NVIDIA
          id: $2
          __display_id: $2
          model: $14
          serial_number: $15
          driver_version: $17
          firmware_version: $19
          info: "${awk::join(\" \", $16, $18)}"
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s - %s - %s)\", $2, \"NVIDIA\", $14, mebiBytes2HumanFormat($20))}"
        metrics:
          hw.gpu.memory.limit: mebiByte2Byte($20)
    collect:
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: osCommand
          commandLine: nvidia-smi -q
          timeout: 90
          computes:
          - type: awk
            script: "${file::embeddedFile-1}"
          - type: keepOnlyMatchingLines
            column: 1
            regExp: ^MSHW_GPU
      mapping:
        source: "${source::monitors.gpu.collect.sources.source(1)}"
        attributes:
          id: $2
        metrics:
          hw.gpu.utilization{task="general"}: percent2Ratio($5)
          hw.gpu.memory.utilization: percent2Ratio($6)
          hw.gpu.utilization{task="encoder"}: percent2Ratio($7)
          hw.gpu.utilization{task="decoder"}: percent2Ratio($8)
          hw.gpu.io{direction="transmit"}: fakeCounter($3)
          hw.gpu.io{direction="receive"}: fakeCounter($4)
          hw.power{hw.type="gpu"}: $9
          hw.energy{hw.type="gpu"}: fakeCounter($9)
  temperature:
    discovery:
      sources:
        source(1):
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(1)}"
          computes:
          - type: keepOnlyMatchingLines
            column: 1
            regExp: ^MSHW_TEMP
      mapping:
        source: "${source::monitors.temperature.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $2
          sensor_location: gpu
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $2, \"gpu\")}"
        metrics:
          hw.temperature.limit{limit_type="high.degraded"}: $4
          hw.temperature.limit{limit_type="high.critical"}: $5
    collect:
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: osCommand
          commandLine: nvidia-smi -q
          timeout: 90
          computes:
          - type: awk
            script: "${file::embeddedFile-1}"
          - type: keepOnlyMatchingLines
            column: 1
            regExp: ^MSHW_TEMP
      mapping:
        source: "${source::monitors.temperature.collect.sources.source(1)}"
        attributes:
          id: $2
        metrics:
          hw.temperature: $3
  voltage:
    discovery:
      sources:
        source(1):
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(1)}"
          computes:
          - type: keepOnlyMatchingLines
            column: 3
            regExp: .
      mapping:
        source: "${source::monitors.voltage.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $2
          sensor_location: gpu
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $2, \"gpu\")}"
    collect:
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: osCommand
          commandLine: nvidia-smi -q
          timeout: 90
          computes:
          - type: awk
            script: "${file::embeddedFile-1}"
          - type: keepOnlyMatchingLines
            column: 1
            regExp: ^MSHW_VOLTAGE
      mapping:
        source: "${source::monitors.voltage.collect.sources.source(1)}"
        attributes:
          id: $2
        metrics:
          hw.voltage: $3
  fan:
    discovery:
      sources:
        source(1):
          type: copy
          from: "${source::monitors.enclosure.discovery.sources.source(1)}"
          computes:
          - type: keepOnlyMatchingLines
            column: 1
            regExp: ^MSHW_FAN
      mapping:
        source: "${source::monitors.fan.discovery.sources.source(1)}"
        attributes:
          id: $2
          __display_id: $2
          sensor_location: gpu
          hw.parent.type: enclosure
          name: "${awk::sprintf(\"%s (%s)\", $2, \"gpu\")}"
        metrics:
          hw.fan.speed_ratio.limit{limit_type="low.degraded"}: percent2Ratio("10")
          hw.fan.speed_ratio.limit{limit_type="low.critical"}: percent2Ratio("0")
    collect:
      type: multiInstance
      keys:
      - id
      sources:
        source(1):
          type: osCommand
          commandLine: nvidia-smi -q
          timeout: 90
          computes:
          - type: awk
            script: "${file::embeddedFile-1}"
          - type: keepOnlyMatchingLines
            column: 1
            regExp: ^MSHW_FAN
      mapping:
        source: "${source::monitors.fan.collect.sources.source(1)}"
        attributes:
          id: $2
        metrics:
          hw.fan.speed_ratio: percent2Ratio($3)
